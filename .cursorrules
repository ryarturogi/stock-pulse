# =============================================================================
# Cursor IDE Rules for StockPulse (Next.js 15 + React 19 + TypeScript)
# Real-time Stock Tracking PWA - UPDATED POST-REFACTOR
# =============================================================================

# Project Overview
# StockPulse: Enterprise-grade Progressive Web Application for real-time stock tracking
# Features: WebSocket live data, stock watchlists, price alerts, push notifications, PWA
# Tech Stack: Next.js 15, React 19, TypeScript 5.6, Zustand, Tailwind CSS, Finnhub API

# Project Configuration
language: "TypeScript"
framework: "Next.js 15"
ui-library: "React 19"
styling: "Tailwind CSS"
state-management: "Zustand"
hosting: "Vercel"
api-provider: "Finnhub"
pwa: "next-pwa"
package-manager: "pnpm"

# Code Formatting
preferred-formatters:
  - "prettier"
  - "eslint"
style:
  quotes: "single"
  semi: true
  trailingComma: "es5"
  printWidth: 80
  tabWidth: 2
  useTabs: false

# Testing Configuration
tests:
  require-unit-tests: true
  unit-framework: "Jest + React Testing Library"
  e2e-framework: "Playwright"
  coverage-threshold: 80
  test-patterns:
    - "**/*.test.ts"
    - "**/*.test.tsx"
    - "**/*.spec.ts"
    - "**/*.spec.tsx"

# Security Guidelines
security:
  disallow-secrets-in-code: true
  verify-environment-vars: true
  use-next-public-prefix: true
  server-only-secrets: true
  cors-origins: "verify-production"

# File Structure (Feature-based Architecture)
file-structure:
  app-directory: "app/"
  core-types: "src/core/types/"
  core-constants: "src/core/constants/"
  features: "src/features/"
  shared-components: "src/shared/components/"
  shared-hooks: "src/shared/hooks/"
  tests: "tests/"
  public: "public/"
  claude-rules: "claude.rules/"

# Current Architecture (Post-Refactor)
architecture:
  pattern: "feature-based"
  state: "zustand-with-persistence"
  api: "finnhub-integration"
  websocket: "eventsource-proxy"
  pwa: "next-pwa-workbox"
  testing: "jest-rtl-playwright"

# Development Prompts
prompts:
  # Next.js 15 Specific
  - "Use Next.js 15 App Router with app/ directory structure."
  - "Leverage React Server Components when possible."
  - "Use Next.js built-in optimizations (Image, Font, etc.)."
  - "Implement proper error.tsx and loading.tsx files."
  - "Use route handlers in app/api/ for API endpoints."
  
  # React 19 Features
  - "Take advantage of React 19 concurrent features."
  - "Use React Compiler optimizations where beneficial."
  - "Implement proper Suspense boundaries."
  - "Use new React 19 hooks when appropriate."
  
  # TypeScript Best Practices
  - "Always include JSDoc for public functions and props."
  - "Use TypeScript strict mode and proper typing."
  - "Define interfaces for all component props."
  - "Use type-safe environment variable access."
  - "Implement proper error types and handling."
  
  # StockPulse TypeScript Requirements (MANDATORY - UPDATED)
  - "ALWAYS import types from '@/core/types' for stock-related functionality."
  - "Use ComponentProps for basic component props with className support."
  - "Use StockStoreState for Zustand store state management."
  - "Use FinnhubStockQuote, WatchedStock, StockOption for stock data."
  - "Use WebSocketStatus, RefreshInterval for connection management."
  - "Use type guards (isString, isNumber, isFinnhubStockQuote) for runtime validation."
  - "Use EventSource | null for WebSocket connections (NEVER any)."
  - "Use NodeJS.Timeout | number | null for timer references."
  - "Use ApiResponse<T> from @/core/types for consistent API responses."
  - "Follow TypeScript strict mode with noImplicitOverride: true."
  
  # Component Guidelines
  - "Prefer small, focused, single-responsibility components."
  - "Use React.memo for performance optimization when appropriate."
  - "Implement proper loading and error states."
  - "Follow accessibility best practices (ARIA, semantic HTML)."
  - "Use Tailwind CSS for styling with consistent design tokens."
  
  # StockPulse State Management (Zustand)
  - "Use useStockStore() for all stock-related state."
  - "Use stockService for API calls with built-in request deduplication."
  - "Use ErrorBoundary for error handling throughout the app."
  - "Use localStorage persistence with fallback for SSR compatibility."
  - "Use WebSocket connections with exponential backoff reconnection."
  - "Prefer local state (useState) for simple component state."
  
  # Performance
  - "Use Next.js Image component for all images."
  - "Implement proper code splitting with dynamic imports."
  - "Use React.lazy for component-level code splitting."
  - "Optimize bundle size and monitor Core Web Vitals."
  
  # Architecture
  - "Prefer composition over inheritance."
  - "Use custom hooks for reusable logic."
  - "Implement proper separation of concerns."
  - "Use services/ for API communication logic."
  
  # StockPulse Testing (Jest + RTL + Playwright)
  - "Use jest.config.cjs configuration (not .ts due to ES modules)."
  - "No React imports needed in tests (React 19 JSX transform)."
  - "Test loading states with skeleton components."
  - "Test error states with ErrorBoundary integration."
  - "Test real-time updates and WebSocket connections."
  - "Test responsive design with Tailwind breakpoints."
  - "Mock Finnhub API and WebSocket connections properly."
  - "Use pnpm test for unit tests, pnpm test:e2e for Playwright."
  
  # Security
  - "Never expose API keys or secrets to client-side code."
  - "Use NEXT_PUBLIC_ prefix only for truly public variables."
  - "Implement proper input validation and sanitization."
  - "Use Content Security Policy headers."
  
  # StockPulse API Routes (Finnhub Integration)
  - "Follow existing patterns from /api/quote and /api/health routes."
  - "Use AbortSignal.timeout(10000) for external API calls."
  - "Handle Finnhub API rate limiting gracefully."
  - "Use proper CORS headers for WebSocket proxy routes."
  - "Validate stock symbols with regex patterns."
  - "Use ApiResponse<T> from @/core/types for consistent responses."
  - "Support stock symbol validation and sanitization."
  
  # Deployment (Vercel)
  - "Configure proper caching strategies."
  - "Use Vercel cron jobs for scheduled tasks."
  - "Implement health check endpoints."
  - "Monitor performance and errors in production."
  - "Leverage Vercel's built-in CI/CD for automatic deployments."
  - "Use Vercel preview deployments for testing features."

# Code Quality
quality:
  max-function-length: 30
  max-component-props: 10
  prefer-early-return: true
  no-nested-ternaries: true
  consistent-naming: true

# Import Organization (Updated for StockPulse)
imports:
  order:
    - "next/*"
    - "external-libraries"
    - "@/core/types" (ALWAYS FIRST - contains all type definitions)
    - "@/features/*"
    - "@/shared/*"
    - "./relative-imports"
  newlines-between: "always"
  sort-alphabetically: true
  react-19-note: "No React imports needed with React 19 JSX transform"

# StockPulse Specific Patterns
stockpulse-patterns:
  store-usage: "const { watchedStocks, addStock, connectWebSocket } = useStockStore();"
  api-calls: "await stockService.fetchStockQuote(symbol) // Built-in deduplication"
  websocket: "EventSource proxy with exponential backoff reconnection"
  error-handling: "ErrorBoundary wrapper with graceful fallbacks"
  loading-states: "Skeleton components for better UX"
  real-time: "WebSocket for live data, periodic refresh as fallback"

# Environment Variables (StockPulse)
env-vars:
  server-side:
    - "FINNHUB_API_KEY"

# Current Status (Post-Refactor)
status:
  typescript-errors: "ZERO (strict mode with noImplicitOverride)"
  test-status: "15/15 tests passing (Jest + RTL)"
  build-status: "Production build successful (122 kB main bundle)"
  performance: "Optimized with request deduplication and memoization"
  websocket: "Memory leaks fixed, proper reconnection logic"
  error-handling: "Comprehensive ErrorBoundary implementation"
  type-safety: "All 'any' types eliminated"
  
# Recent Improvements (Latest Review)
recent-fixes:
  - "Fixed WebSocket memory leaks with proper cleanup"
  - "Eliminated all any types for better type safety"
  - "Added request deduplication to prevent duplicate API calls"
  - "Implemented exponential backoff for WebSocket reconnections"
  - "Enhanced error handling with comprehensive ErrorBoundary"
  - "Improved loading states with skeleton components"
  - "Fixed Jest configuration for ES modules compatibility"
  - "Added proper TypeScript override modifiers"