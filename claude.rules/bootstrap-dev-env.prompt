Goal
Prepare an enterprise-grade development environment for a React + TypeScript stock-watcher project using Next.js 15.
Do not implement business logic or UI yet.
Scaffold the repo with all required configs, docs, CI/CD workflows, Cursor + Claude Code rules, and Vercel deployment setup.

⸻

Deliverables

Claude must generate all files needed so the project runs with:
    •    Next.js 15 + React 19 + TypeScript (strict mode)
    •    React Compiler enabled for automatic optimizations
    •    Tailwind CSS + shadcn/ui for styling
    •    Zustand for state management
    •    ESLint 9 (flat config) + Prettier + Husky + lint-staged
    •    Jest + React Testing Library (unit tests)
    •    Playwright (E2E tests)
    •    Vercel Git Integration (automatic deployments on push)
    •    PWA readiness (next-pwa, service worker, push notifications)
    •    Vercel deployment configuration
    •    Secure .env setup (.env.example, .env.production, .env.staging)
    •    Environment variable security audit (NEXT_PUBLIC_ vs private)
    •    Docs: README.md, ARCHITECTURE.md, VERCEL-DEPLOYMENT.md
    •    Rules: .cursorrules, claude.rules/

⸻

Repo Structure (Next.js 15 App Router)

/ (root)
├─ .github/workflows/ci.yml
├─ .cursorrules
├─ claude.rules/
│  ├─ bootstrap-dev-env.prompt
│  ├─ create-component.prompt
│  ├─ create-api-route.prompt
│  └─ create-page.prompt
├─ app/
│  ├─ api/
│  │  ├─ health/route.ts
│  │  └─ cron/
│  ├─ globals.css
│  ├─ layout.tsx
│  ├─ page.tsx
│  ├─ loading.tsx
│  └─ error.tsx
├─ components/
│  ├─ ui/ (shadcn/ui components)
│  └─ shared/
├─ hooks/
├─ lib/
├─ services/
├─ stores/
├─ types/
├─ utils/
├─ public/
│  ├─ manifest.json
│  ├─ sw.js
│  └─ icons/
├─ scripts/
│  ├─ generate-vapid.js
│  ├─ setup-vercel-env.sh
│  └─ deploy-vercel.sh
├─ docs/
│  ├─ ARCHITECTURE.md
│  ├─ VERCEL-DEPLOYMENT.md
│  └─ TEST-REVIEW.md
├─ tests/
├─ package.json
├─ next.config.js
├─ tailwind.config.ts
├─ tsconfig.json
├─ eslint.config.js
├─ prettier.config.js
├─ jest.config.ts
├─ playwright.config.ts
├─ vercel.json
├─ .gitignore
├─ .env.example
├─ .env.production
└─ README.md

⸻

Operational Rule

Claude should generate all files listed in the repo structure with placeholder content (ready to edit).
No business logic, no Finnhub API calls, no UI.
Stop after scaffolding is complete.