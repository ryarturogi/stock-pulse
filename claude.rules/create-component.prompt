Goal: Create a React + TypeScript component named <ComponentName> for the Next.js 15 + React 19 StockPulse project.

Project Context:
- StockPulse: Real-time stock tracking PWA with Finnhub API integration
- Features: Stock watchlists, price alerts, WebSocket real-time data, PWA with push notifications
- Architecture: Feature-based structure with shared components and hooks

Constraints:
- Use functional component with proper TypeScript typing
- Props must be typed and documented with JSDoc
- Add unit test with React Testing Library (use jest.config.cjs)
- Do not hardcode secrets or API keys
- Follow accessibility best practices
- Include proper error handling and loading states with ErrorBoundary support
- Use TypeScript strict mode with noImplicitOverride: true
- Follow Next.js 15 and React 19 best practices (no React import needed)
- Use Tailwind CSS for styling with dark mode support
- Consider Server Component vs Client Component usage
- Use pnpm for package management
- Follow feature-based architecture pattern

Deliverables:
- src/shared/components/<ComponentName>/<ComponentName>.tsx
- src/shared/components/<ComponentName>/<ComponentName>.test.tsx
- Update src/shared/components/index.ts export
- Optional: Add to feature-specific components if domain-specific

Template Structure:

```typescript
// No React import needed with React 19 JSX transform
import { ComponentProps } from '@/core/types';

/**
 * Props for the <ComponentName> component
 * Uses project utility types for consistency and type safety
 */
export interface <ComponentName>Props extends ComponentProps {
  // Define component-specific props here with JSDoc comments
  // Available from @/core/types:
  // - StockOption, WatchedStock, FinnhubStockQuote for stock data
  // - WebSocketStatus, RefreshInterval for connection states
  // - ChartDataPoint for chart components
  // - Use type guards: isString, isNumber, isFinnhubStockQuote, etc.
}

/**
 * <ComponentName> component description
 * 
 * @param props - The component props
 * @returns JSX element
 */
export const <ComponentName> = ({ className, ...props }: <ComponentName>Props) => {
  // Component implementation
  // Use type guards from @/types/utils for runtime type checking
  
  return (
    <div className={className}>
      {/* Component JSX with Tailwind CSS classes */}
    </div>
  );
};

export default <ComponentName>;
```

Next.js 15 Considerations:
- Use 'use client' directive only if component needs client-side features
- Prefer Server Components when possible for better performance
- Use Next.js Image component for images
- Implement proper loading.tsx and error.tsx for pages
- Use React 19 concurrent features when appropriate

TypeScript Requirements:
- ALWAYS import types from '@/core/types' for stock-related functionality
- Use ComponentProps for basic component props with className support
- Use StockStoreState for Zustand store state management
- Use FinnhubStockQuote, WatchedStock, StockOption for stock data
- Use WebSocketStatus, RefreshInterval for connection management
- Use type guards (isString, isNumber, isFinnhubStockQuote, etc.) for runtime checking
- Use EventSource | null for WebSocket connections (not any)
- Use NodeJS.Timeout | number | null for timer references

StockPulse Specific Patterns:
- Use useStockStore() for stock state management
- Use stockService for API calls with request deduplication
- Use ErrorBoundary for error handling
- Use STOCK_COLORS for consistent chart coloring
- Use REFRESH_INTERVALS for connection timing
- Use getNotificationService() for push notifications
- Follow feature-based structure: features/stocks/, features/notifications/, features/pwa/
- Use InfiniteStockSelector for stock selection with infinite loading
- Use StockSearch for comprehensive stock search functionality
- Implement keyboard navigation and accessibility in all selectors
- Use intersection observer for infinite loading patterns
- Implement proper loading states with skeleton components
- Use debounced search with 300ms delay for API calls

Testing Requirements:
- Use jest.config.cjs configuration
- Test with React Testing Library (no React import needed)
- Test loading states with skeleton components
- Test error states with ErrorBoundary integration
- Test real-time updates and WebSocket connections
- Test responsive design with Tailwind breakpoints
- Test dark mode compatibility
- Validate TypeScript strict mode compliance