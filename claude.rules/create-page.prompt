Goal: Create a Next.js 15 page component named <PageName> for the StockPulse application following App Router conventions.

Project Context:
- StockPulse: Real-time stock tracking PWA with Finnhub API integration
- Current pages: Main dashboard (app/page.tsx) with stock watchlist and charts
- Features: WebSocket live data, stock management, price alerts, PWA functionality

Constraints:
- Use Next.js 15 App Router structure (app/*)
- Implement as Server Component by default (use 'use client' only when needed)
- Add TypeScript strict typing with noImplicitOverride: true
- Include proper SEO metadata for stock tracking context
- Add loading and error boundary support with ErrorBoundary integration
- Follow accessibility best practices for financial data display
- Use Tailwind CSS with dark mode support
- Implement responsive design for mobile/desktop stock tracking
- Add proper TypeScript interfaces using @/core/types

Deliverables:
- app/<page-path>/page.tsx
- app/<page-path>/loading.tsx
- app/<page-path>/error.tsx
- Optional: app/<page-path>/types.ts (for complex types)

Template Structure:

```typescript
// No React import needed with React 19 JSX transform
import { Metadata } from 'next';
import { ComponentProps, ApiResponse, isString } from '@/core/types';

// Types for page props using utility types
interface <PageName>Props {
  params: {
    // Define dynamic route parameters with proper typing
  };
  searchParams: {
    // Define search parameters with proper typing
    [key: string]: string | string[] | undefined;
  };
}

// Define data types for the page
interface PageData {
  // Define the structure of data this page needs
}

// Define the async state for data fetching
type PageState = AsyncState<PageData>;

/**
 * Generate metadata for the page
 */
export async function generateMetadata(
  { params, searchParams }: <PageName>Props
): Promise<Metadata> {
  return {
    title: '<PageName> | StockPulse',
    description: 'Description of the page',
    openGraph: {
      title: '<PageName> | StockPulse',
      description: 'Description of the page',
      type: 'website',
    },
  };
}

/**
 * <PageName> page component
 * @description Brief description of what this page does
 */
export default async function <PageName>Page({ 
  params, 
  searchParams 
}: <PageName>Props) {
  // Server-side data fetching
  // TODO: Add data fetching logic if needed
  
  return (
    <div className="container mx-auto px-4 py-8">
      <main className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">
          <PageName>
        </h1>
        
        {/* Page content */}
        <div className="space-y-6">
          {/* TODO: Add page content */}
        </div>
      </main>
    </div>
  );
}
```

Loading Component (app/<page-path>/loading.tsx):

```typescript
/**
 * Loading UI for <PageName> page
 */
export default function Loading() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="space-y-4">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

Error Component (app/<page-path>/error.tsx):

```typescript
'use client';

// No React import needed with React 19 JSX transform
import { useEffect } from 'react';

interface ErrorProps {
  error: Error & { digest?: string };
  reset: () => void;
}

/**
 * Error UI for <PageName> page
 */
export default function Error({ error, reset }: ErrorProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error('Page error:', error);
  }, [error]);

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-md mx-auto text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">
          Something went wrong!
        </h2>
        <p className="text-gray-600 mb-6">
          We apologize for the inconvenience. Please try again.
        </p>
        <button
          onClick={reset}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors"
        >
          Try again
        </button>
      </div>
    </div>
  );
}
```

Next.js 15 Features:
- Use Server Components for better performance by default
- Implement proper metadata generation for SEO
- Use streaming with Suspense boundaries for loading states
- Leverage React 19 concurrent features when appropriate
- Use Next.js Image component for optimized images
- Implement proper caching strategies

SEO and Performance:
- Generate proper metadata for each page
- Use semantic HTML structure
- Implement proper heading hierarchy (h1, h2, h3)
- Add alt text for images
- Use Next.js Image component for optimization
- Consider Core Web Vitals optimization

Accessibility Requirements:
- Use semantic HTML elements
- Include proper ARIA labels and roles
- Ensure keyboard navigation works
- Test with screen readers
- Use sufficient color contrast
- Implement focus management

StockPulse TypeScript Requirements:
- Use ComponentProps from @/core/types for page component props
- Use ApiResponse<T> for API call return types (stock data)
- Use type guards (isString, isNumber, isFinnhubStockQuote) for validation
- Use Metadata type from Next.js for SEO metadata
- Use StockOption, WatchedStock for stock-related data
- Use WebSocketStatus for connection state display
- Validate stock symbols and financial data with type guards
- Use ErrorBoundary for error handling integration

StockPulse Specific Patterns:
- Integrate with useStockStore() for stock state management
- Use stockService for API calls with request deduplication
- Support real-time data display with WebSocket status
- Include price alert functionality where relevant
- Support dark/light theme switching with Tailwind
- Display financial data with proper formatting
- Handle loading states for stock data fetching

Testing Requirements:
- Use jest.config.cjs configuration (not .ts)
- Test server-side rendering without React imports
- Test stock data display and formatting
- Test responsive design for mobile stock tracking
- Test accessibility for financial data screen readers
- Test error states with ErrorBoundary integration
- Test dark mode compatibility with stock data